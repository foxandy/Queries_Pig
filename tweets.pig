tweets = LOAD 'tweets/tweets_2012*.txt' USING PigStorage('|') AS (time,id,handle,name,dummy1,dummy2,dummy3,dummy4,dummy5,tweet);
bad = LOAD 'tweets/bad.txt' USING PigStorage() AS (word);
good = LOAD 'tweets/good.txt' USING PigStorage() AS (word);
tweet_words = FOREACH tweets GENERATE id, time, FLATTEN(TOKENIZE(tweet)) AS word_raw;
tweet_words_lc = FOREACH tweet_words GENERATE id, time, LOWER(word_raw) AS word;
bad_join = JOIN tweet_words_lc BY word, bad BY word USING 'replicated';
bad_join_clean = FOREACH bad_join GENERATE tweet_words_lc::id AS id, tweet_words_lc::time AS time, bad::word AS word;
bad_group = GROUP bad_join_clean BY (id, time);
bad_count = FOREACH bad_group GENERATE group, -1*COUNT(bad_join_clean.word) AS word_score;
good_join = JOIN tweet_words_lc BY word, good BY word USING 'replicated';
good_join_clean = FOREACH good_join GENERATE tweet_words_lc::id AS id, tweet_words_lc::time AS time, good::word AS word;
good_group = GROUP good_join_clean BY (id, time);
good_count = FOREACH good_group GENERATE group, COUNT(good_join_clean.word) AS word_score;
all_union = UNION good_count, bad_count;
all_group = GROUP all_union BY (group.id, group.time);
all_sum = FOREACH all_group GENERATE group, SUM(all_union.word_score) AS sentiment;
pos_tweets = FILTER all_sum BY sentiment > 0;
pos_tweets_simple = FOREACH pos_tweets GENERATE group.id;
pos_group = GROUP pos_tweets_simple ALL;
pos_total = FOREACH pos_group GENERATE group, COUNT(pos_tweets_simple.id) AS pos_count;
neg_tweets = FILTER all_sum BY sentiment < 0;
neg_tweets_simple = FOREACH neg_tweets GENERATE group.id;
neg_group = GROUP neg_tweets_simple ALL;
neg_total = FOREACH neg_group GENERATE group, COUNT(neg_tweets_simple.id) AS neg_count;
STORE pos_total INTO 'tweets/tweets_output_pos' USING PigStorage();
STORE neg_total INTO 'tweets/tweets_output_neg' USING PigStorage();
